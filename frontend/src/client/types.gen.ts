// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type CeleryTaskStatus = 'PENDING' | 'STARTED' | 'RETRY' | 'FAILURE' | 'SUCCESS';

/**
 * Request model for converting document json to excel.
 */
export type ConvertingRequest = {
    file_key: string;
};

export type FileProcessedRequest = {
    file_key: string;
    file_name: string;
};

export type FileProcessedResponse = {
    message: string;
    task_id: string;
    file_key: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

/**
 * Request model for checking operation status.
 */
export type OperationStatusRequest = {
    operation_name: string;
};

/**
 * Response model for operation status.
 */
export type OperationStatusResponse = {
    done: boolean;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

/**
 * 用於生成簽名 URL 的請求模型。
 */
export type SignedUrlRequest = {
    file_name: string;
    content_type: string;
};

/**
 * 用於生成簽名 URL 的請求模型。
 */
export type SignedUrlRespsonse = {
    signed_url: string;
    file_key?: (string | null);
    file_name?: (string | null);
};

export type SystemInfoResponse = {
    gcp_processor_version: string;
    gcp_project_id: (string | null);
    gcp_location: string;
    gcp_processor_id: (string | null);
};

export type TaskStatusResponse = {
    status: CeleryTaskStatus;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type DocumentGenerateSignedUrlEndpointData = {
    requestBody: SignedUrlRequest;
};

export type DocumentGenerateSignedUrlEndpointResponse = (SignedUrlRespsonse);

export type DocumentProcessUploadedFileData = {
    requestBody: FileProcessedRequest;
};

export type DocumentProcessUploadedFileResponse = (FileProcessedResponse);

export type DocumentConvertProcessedFileToExcelData = {
    requestBody: ConvertingRequest;
};

export type DocumentConvertProcessedFileToExcelResponse = (FileProcessedResponse);

export type DocumentTestData = {
    requestBody: ConvertingRequest;
};

export type DocumentTestResponse = (unknown);

export type DocumentDownloadFromGcsData = {
    gcsDownloadPath: string;
};

export type DocumentDownloadFromGcsResponse = (SignedUrlRespsonse);

export type DocumentGetOperationData = {
    requestBody: OperationStatusRequest;
};

export type DocumentGetOperationResponse = (OperationStatusResponse);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TasksGetTaskStatusData = {
    taskId: string;
};

export type TasksGetTaskStatusResponse = (TaskStatusResponse);

export type TasksGetTaskResultData = {
    taskId: string;
};

export type TasksGetTaskResultResponse = ({
    [key: string]: unknown;
});

export type TasksCancelTaskData = {
    taskId: string;
};

export type TasksCancelTaskResponse = (unknown);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsGetOperationInfoResponse = (SystemInfoResponse);